// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ThirdParty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ThirdParty entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ThirdParty entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ThirdParty", id.toString(), this);
  }

  static load(id: string): ThirdParty | null {
    return store.get("ThirdParty", id) as ThirdParty | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get managers(): Array<string> | null {
    let value = this.get("managers");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set managers(value: Array<string> | null) {
    if (value === null) {
      this.unset("managers");
    } else {
      this.set("managers", Value.fromStringArray(value as Array<string>));
    }
  }

  get rawMetadata(): string {
    let value = this.get("rawMetadata");
    return value.toString();
  }

  set rawMetadata(value: string) {
    this.set("rawMetadata", Value.fromString(value));
  }

  get resolver(): string {
    let value = this.get("resolver");
    return value.toString();
  }

  set resolver(value: string) {
    this.set("resolver", Value.fromString(value));
  }

  get isApproved(): boolean {
    let value = this.get("isApproved");
    return value.toBoolean();
  }

  set isApproved(value: boolean) {
    this.set("isApproved", Value.fromBoolean(value));
  }

  get maxItems(): BigInt {
    let value = this.get("maxItems");
    return value.toBigInt();
  }

  set maxItems(value: BigInt) {
    this.set("maxItems", Value.fromBigInt(value));
  }

  get totalItems(): BigInt {
    let value = this.get("totalItems");
    return value.toBigInt();
  }

  set totalItems(value: BigInt) {
    this.set("totalItems", Value.fromBigInt(value));
  }

  get items(): Array<string> | null {
    let value = this.get("items");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set items(value: Array<string> | null) {
    if (value === null) {
      this.unset("items");
    } else {
      this.set("items", Value.fromStringArray(value as Array<string>));
    }
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (value === null) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(value as string));
    }
  }

  get searchName(): string | null {
    let value = this.get("searchName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchName(value: string | null) {
    if (value === null) {
      this.unset("searchName");
    } else {
      this.set("searchName", Value.fromString(value as string));
    }
  }

  get searchDescription(): string | null {
    let value = this.get("searchDescription");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchDescription(value: string | null) {
    if (value === null) {
      this.unset("searchDescription");
    } else {
      this.set("searchDescription", Value.fromString(value as string));
    }
  }

  get searchText(): string | null {
    let value = this.get("searchText");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchText(value: string | null) {
    if (value === null) {
      this.unset("searchText");
    } else {
      this.set("searchText", Value.fromString(value as string));
    }
  }
}

export class Item extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Item entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Item entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Item", id.toString(), this);
  }

  static load(id: string): Item | null {
    return store.get("Item", id) as Item | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get rawMetadata(): string {
    let value = this.get("rawMetadata");
    return value.toString();
  }

  set rawMetadata(value: string) {
    this.set("rawMetadata", Value.fromString(value));
  }

  get isApproved(): boolean {
    let value = this.get("isApproved");
    return value.toBoolean();
  }

  set isApproved(value: boolean) {
    this.set("isApproved", Value.fromBoolean(value));
  }

  get thirdParty(): string {
    let value = this.get("thirdParty");
    return value.toString();
  }

  set thirdParty(value: string) {
    this.set("thirdParty", Value.fromString(value));
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (value === null) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(value as string));
    }
  }
}

export class Tier extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Tier entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Tier entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Tier", id.toString(), this);
  }

  static load(id: string): Tier | null {
    return store.get("Tier", id) as Tier | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }
}

export class Metadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Metadata entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Metadata entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Metadata", id.toString(), this);
  }

  static load(id: string): Metadata | null {
    return store.get("Metadata", id) as Metadata | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(value as string));
    }
  }

  get thirdParty(): string | null {
    let value = this.get("thirdParty");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set thirdParty(value: string | null) {
    if (value === null) {
      this.unset("thirdParty");
    } else {
      this.set("thirdParty", Value.fromString(value as string));
    }
  }
}

export class ThirdPartyMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ThirdPartyMetadata entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ThirdPartyMetadata entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ThirdPartyMetadata", id.toString(), this);
  }

  static load(id: string): ThirdPartyMetadata | null {
    return store.get("ThirdPartyMetadata", id) as ThirdPartyMetadata | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }
}

export class Count extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Count entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Count entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Count", id.toString(), this);
  }

  static load(id: string): Count | null {
    return store.get("Count", id) as Count | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get thirdPartyTotal(): BigInt {
    let value = this.get("thirdPartyTotal");
    return value.toBigInt();
  }

  set thirdPartyTotal(value: BigInt) {
    this.set("thirdPartyTotal", Value.fromBigInt(value));
  }

  get itemTotal(): BigInt {
    let value = this.get("itemTotal");
    return value.toBigInt();
  }

  set itemTotal(value: BigInt) {
    this.set("itemTotal", Value.fromBigInt(value));
  }

  get tierTotal(): BigInt {
    let value = this.get("tierTotal");
    return value.toBigInt();
  }

  set tierTotal(value: BigInt) {
    this.set("tierTotal", Value.fromBigInt(value));
  }
}
